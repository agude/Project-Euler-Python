#  Copyright (C) 2010  Alexander Gude - alex.public.account+ProjectEulerSolutions@gmail.com
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  The most recent version of this program is avaible at:
#  http://github.com/Falcorian/Project-Euler-Solutions

import time
from optparse import OptionParser
"""
Consider all integer combinations of ab for 2  a  5 and 2  b  5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2  a  100 and 2  b  100?
"""
# Optparse setup
usage = "usage: %prog [OPTIONS] -a number -b number"
parser = OptionParser(usage=usage)
parser.add_option("-a", "--amax", action="store", type="int", dest="amax", default=100, help="calculate a^b for 2 < a < amax")
parser.add_option("-b", "--bmax", action="store", type="int", dest="bmax", default=100, help="calculate a^b for 2 < b < bmax")

(options, args) = parser.parse_args()

# Functions

# Solution
s = time.time()

amax = options.amax
bmax = options.bmax
nset  = []
for a in range(2,amax+1):
    for b in range(2,bmax+1):
        nset.append(a**b)

print len(list(set(nset))),'in',time.time()-s,'secs'
