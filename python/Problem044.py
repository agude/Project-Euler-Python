#!/usr/bin/env python3

#  Copyright (C) 2014  Alexander Gude - alex.public.account+ProjectEulerSolutions@gmail.com
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  The most recent version of this program is available at:
#  https://github.com/agude/Project-Euler

"""
Pentagonal numbers are generated by the formula, Pn = n * ((3 * n) - 1)/2. The
first ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference are pentagonal and D = |Pk - Pj| is minimised; what is the value of
D?
"""

from euler.polygonal import pentagonals, is_pentagonal
from math import sqrt
from sys import exit
from time import time


def problem_044():
    start_time = time()

    answer = None
    distance = None
    # Loop over all pentagonals, and all pentagonals smaller than the current
    # one. Compare the pair of these and see if they satisfy our criteria.
    for first_pent in pentagonals():
        # This formula finds the "order" of the polygonal number, which we use
        # to stop the second loop
        first_n = (sqrt(24 * first_pent + 1) + 1) / 6

        for second_pent in pentagonals(stop=first_n):
            pent_sum = first_pent + second_pent
            pent_difference = first_pent - second_pent
            # The first value we find will have the smallest distance, as the
            # distance increase as a function of n.
            if is_pentagonal(pent_sum) and is_pentagonal(pent_difference):
                answer = abs(pent_difference)

                end_time = time() - start_time
                print(answer, 'in', end_time, 'secs')
                return answer

# Only runs if executed directly
if __name__ == '__main__':

    problem_044()
